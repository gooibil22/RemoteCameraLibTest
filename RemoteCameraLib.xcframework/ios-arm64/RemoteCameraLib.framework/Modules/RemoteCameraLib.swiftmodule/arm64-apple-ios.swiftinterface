// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.10 (swiftlang-5.10.0.13 clang-1500.3.9.4)
// swift-module-flags: -target arm64-apple-ios13.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name RemoteCameraLib
import AVFoundation
import AudioToolbox
import CoreImage
import Foundation
import Network
import OSLog
import QuartzCore
@_exported import RemoteCameraLib
import ReplayKit
import Swift
import UIKit
import VideoToolbox
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class LGCastCameraPreviewView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public class var layerClass: Swift.AnyClass {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@_hasMissingDesignatedInitializers open class EventCenter {
  public static let share: RemoteCameraLib.EventCenter
  open func onSceneDelegateEvent(_ data: Swift.String)
  open func onAppDelegateEvent(_ data: Swift.String)
  @objc deinit
}
@objc public enum MTVideoType : Swift.Int32 {
  case raw
  case h264
  case mjpeg
  public init?(rawValue: Swift.Int32)
  public typealias RawValue = Swift.Int32
  public var rawValue: Swift.Int32 {
    get
  }
}
@objc @_inheritsConvenienceInitializers public class MTVideoInfo : ObjectiveC.NSObject {
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class Log : ObjectiveC.NSObject {
  public static func debug(_ items: Any..., file: Swift.String = #file, function: Swift.String = #function, line: Swift.Int = #line)
  public static func info(_ items: Any..., file: Swift.String = #file, function: Swift.String = #function, line: Swift.Int = #line)
  public static func notice(_ items: Any..., file: Swift.String = #file, function: Swift.String = #function, line: Swift.Int = #line)
  public static func error(_ items: Any..., file: Swift.String = #file, function: Swift.String = #function, line: Swift.Int = #line)
  public static func fault(_ items: Any..., file: Swift.String = #file, function: Swift.String = #function, line: Swift.Int = #line)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class MTRTPSecurityKey : ObjectiveC.NSObject {
  @objc override dynamic public init()
  @objc deinit
}
extension UIKit.UIDevice {
  @_Concurrency.MainActor(unsafe) public var isPhoneDevice: Swift.Bool {
    get
  }
  @_Concurrency.MainActor(unsafe) public var isPadDevice: Swift.Bool {
    get
  }
  @_Concurrency.MainActor(unsafe) public var modelName: Swift.String {
    get
  }
}
@propertyWrapper public struct LGCastUserDefaults<T> {
  public var wrappedValue: T {
    get
    set
  }
}
public enum RTPStreamerMediaType : Swift.Int32 {
  case VIDEO
  case AUDIO
  case AV
  public init?(rawValue: Swift.Int32)
  public typealias RawValue = Swift.Int32
  public var rawValue: Swift.Int32 {
    get
  }
}
public enum RTPStreamerRscType : Swift.Int32 {
  case APP
  case FILE
  case SOCKET
  case CAMERA
  public init?(rawValue: Swift.Int32)
  public typealias RawValue = Swift.Int32
  public var rawValue: Swift.Int32 {
    get
  }
}
public enum RTPStreamerSRTPAuthType : Swift.Int32 {
  case NONE
  case HMAC_SHA1_32
  case HMAC_SHA1_80
  public init?(rawValue: Swift.Int32)
  public typealias RawValue = Swift.Int32
  public var rawValue: Swift.Int32 {
    get
  }
}
public enum RTPStreamerSRTPCipherType : Swift.Int32 {
  case NONE
  case AES_128_ICM
  case AES_256_ICM
  case AES_128_GCM
  case AES_256_GCM
  public init?(rawValue: Swift.Int32)
  public typealias RawValue = Swift.Int32
  public var rawValue: Swift.Int32 {
    get
  }
}
@objc @_inheritsConvenienceInitializers public class MTRTPSecurity : ObjectiveC.NSObject {
  @objc override dynamic public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers public class RemoteCameraApi {
  public static var share: RemoteCameraLib.RemoteCameraApi?
  public static func initialize(completion: (Swift.Bool) -> Swift.Void)
  public func startCameraPreview(_ vc: UIKit.UIViewController, _ lensFacing: Swift.Int, _ host: Swift.String, _ port: Swift.UInt16, completion: (Swift.Bool, Swift.String) -> Swift.Void)
  public func stopCameraPreview(completion: (Swift.Bool) -> Swift.Void)
  public func changeLensFacing()
  public func terminate(completion: (Swift.Bool) -> Swift.Void)
  @objc deinit
}
@objc public enum LGCastCameraError : Swift.Int {
  case unknown
  case connectionClosed
  case deviceShutdown
  case rendererTerminated
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum MTAudioType : Swift.Int32 {
  case pcm
  case aac
  public init?(rawValue: Swift.Int32)
  public typealias RawValue = Swift.Int32
  public var rawValue: Swift.Int32 {
    get
  }
}
@objc @_inheritsConvenienceInitializers public class MTAudioInfo : ObjectiveC.NSObject {
  @objc override dynamic public init()
  @objc deinit
}
@objc public protocol LGCastCameraApiDelegate {
  @objc func lgcastCameraDidPlay()
  @objc func lgcastCameraDidChange(property: RemoteCameraLib.LGCastCameraProperty)
  @objc func lgcastCameraErrorDidOccur(error: RemoteCameraLib.LGCastCameraError)
}
@_inheritsConvenienceInitializers @objc public class LGCastCameraResolutionInfo : ObjectiveC.NSObject {
  @objc public var width: Swift.Int
  @objc public var height: Swift.Int
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class LGCastCameraApi : ObjectiveC.NSObject {
  @objc public static let KEY_CAMERA_POSITION: Swift.String
  @objc public static let KEY_PREVIEW_VIDEO_GRAVITY: Swift.String
  @objc public static let KEY_IS_SUPPORT_LANDSCAPE_MODE: Swift.String
  @objc public static let shared: RemoteCameraLib.LGCastCameraApi
  @objc weak public var delegate: (any RemoteCameraLib.LGCastCameraApiDelegate)?
  @objc public var isRunning: Swift.Bool {
    get
  }
  public var isTvInputEnabled: Swift.Bool {
    get
  }
  @objc public func isSupportedOsVersion() -> Swift.Bool
  @objc public func createCameraPreviewView(_ options: [Swift.String : Any]? = nil) -> UIKit.UIView
  @objc public func setPreviewView(_ view: RemoteCameraLib.LGCastCameraPreviewView, options: [Swift.String : Any]? = nil)
  @objc public func generateCameraMasterKey(_ publicKey: Swift.String) -> Swift.Array<RemoteCameraLib.LGCastSecurityKey>?
  @objc public func getCameraProperties() -> RemoteCameraLib.LGCastCameraParameterInfo?
  @objc public func setCameraProperties(property: RemoteCameraLib.LGCastCameraProperty, value: Swift.Int) -> Swift.Bool
  @objc public func startRemoteCamera(_ settings: RemoteCameraLib.LGCastDeviceSettings)
  @objc public func stopRemoteCamera()
  @objc public func pauseRemoteCamera()
  @objc public func getSupportedResolutions() -> [RemoteCameraLib.LGCastCameraResolutionInfo]
  @objc public func getCurrentResolution() -> RemoteCameraLib.LGCastCameraResolutionInfo
  @objc public func setResolution(_ resolution: RemoteCameraLib.LGCastCameraResolutionInfo) -> Swift.Bool
  @objc public func changeCameraPosition(_ position: RemoteCameraLib.LGCastCameraPosition) -> Swift.Bool
  @objc public func muteMicrophone(_ isMuted: Swift.Bool) -> Swift.Bool
  @objc deinit
}
@_hasMissingDesignatedInitializers open class LibUtils {
  public static let share: RemoteCameraLib.LibUtils
  open func getOrientationString(_ orientation: UIKit.UIDeviceOrientation) -> Swift.String
  open func showToast(_ view: UIKit.UIView, _ message: Swift.String)
  open func BytesToHexString(_ bytes: [Swift.UInt8]) -> Swift.String
  @objc deinit
}
public protocol AudioEncoderDelegate : AnyObject {
  func audioEncoder(_ encoder: RemoteCameraLib.AudioEncoder, didPrepare result: Swift.Bool)
  func audioEncoder(_ encoder: RemoteCameraLib.AudioEncoder, didStart result: Swift.Bool, startPts: CoreMedia.CMTime, startTime: Dispatch.DispatchTime)
  func audioEncoder(_ encoder: RemoteCameraLib.AudioEncoder, with type: RemoteCameraLib.MTAudioType, didEncode data: Foundation.Data, pts: CoreMedia.CMTime, priority: Swift.Int)
}
@_hasMissingDesignatedInitializers public class AudioEncoder {
  public func prepareAudioEncoder(_ sampleBuffer: CoreMedia.CMSampleBuffer)
  public func processAudioSampleBuffer(_ sampleBuffer: CoreMedia.CMSampleBuffer, baseTime: CoreMedia.CMTime)
  @objc deinit
}
extension CoreAudioTypes.AudioStreamBasicDescription : Swift.Equatable {
  public static func == (lhs: CoreAudioTypes.AudioStreamBasicDescription, rhs: CoreAudioTypes.AudioStreamBasicDescription) -> Swift.Bool
}
public enum MTMediaType : Swift.Int32 {
  case video
  case audio
  case av
  public init?(rawValue: Swift.Int32)
  public typealias RawValue = Swift.Int32
  public var rawValue: Swift.Int32 {
    get
  }
}
@objc @_inheritsConvenienceInitializers public class MTMediaInfo : ObjectiveC.NSObject {
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class LibCameraViewController : UIKit.UIViewController, AVFoundation.AVCaptureVideoDataOutputSampleBufferDelegate {
  @_Concurrency.MainActor(unsafe) open var mIsFront: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var mOrientation: UIKit.UIDeviceOrientation? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc open func captureOutput(_ output: AVFoundation.AVCaptureOutput, didOutput sampleBuffer: CoreMedia.CMSampleBuffer, from connection: AVFoundation.AVCaptureConnection)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLayoutSubviews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillDisappear(_ animated: Swift.Bool)
  @objc deinit
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
}
extension RemoteCameraLib.Log {
  @objc public static func debugLGCast(_ message: Swift.String)
  @objc public static func infoLGCast(_ message: Swift.String)
  @objc public static func noticeLGCast(_ message: Swift.String)
  @objc public static func errorLGCast(_ message: Swift.String)
  @objc public static func faultLGCast(_ message: Swift.String)
}
@objc public enum LGCastCameraProperty : Swift.Int {
  case audio
  case autoWhiteBalance
  case brightness
  case facing
  case resolution
  case whitebalance
  case rotation
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum LGCastCameraPosition : Swift.Int {
  case front = 0
  case back = 1
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum LGCastCameraPreviewVideoGravity : Swift.Int {
  case resize
  case resizeAspect
  case resizeAspectFill
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum LGCastCamperaPropertyStatus : Swift.Int {
  case disable = 0
  case enable = 1
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum LGCastCameraResolution : Swift.Int {
  case low
  case medium
  case high
  case cif352x288
  case vga640x480
  case hd1280x720
  case hd1920x1080
  case hd4K3840x2160
  case iFrame960x540
  case iFrame1280x720
  public init(width: Swift.Int, height: Swift.Int)
  public var description: Swift.String {
    get
  }
  public func getSize() -> (width: Swift.Int, height: Swift.Int)
  public func getWidth() -> Swift.Int
  public func getHeight() -> Swift.Int
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @objc public class LGCastSecurityKey : ObjectiveC.NSObject {
  @objc public var masterKey: Swift.String?
  @objc public var mki: Swift.String?
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class LGCastDeviceSettings : ObjectiveC.NSObject {
  @objc public var host: Swift.String?
  @objc public var audioPort: Swift.Int
  @objc public var videoPort: Swift.Int
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class LGCastMirroringAudioSettings : ObjectiveC.NSObject {
  @objc public var sampleRate: Swift.Int
  @objc public var bitrate: Swift.Int
  @objc public var channelCnt: Swift.Int
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class LGCastMirroringVideoSettings : ObjectiveC.NSObject {
  @objc public var width: Swift.Int
  @objc public var height: Swift.Int
  @objc public var isPortraitMode: Swift.Bool
  @objc public var framerate: Swift.Int
  @objc public var bitrate: Swift.Int
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class LGCastMirroringMediaSettings : ObjectiveC.NSObject {
  @objc public var audio: RemoteCameraLib.LGCastMirroringAudioSettings?
  @objc public var video: RemoteCameraLib.LGCastMirroringVideoSettings?
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class LGCastMirroringAudioInfo : ObjectiveC.NSObject {
  @objc public var type: RemoteCameraLib.MTAudioType
  @objc public var codec: Swift.String {
    @objc get
  }
  @objc public var samplingRate: Swift.Int
  @objc public var channelCnt: Swift.Int
  @objc public var bitrate: Swift.Int
  @objc public var streamMuxConfig: Swift.String
  @objc public var codecData: Foundation.Data?
  @objc public var host: Swift.String?
  @objc public var port: Swift.Int
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class LGCastMirroringVideoInfo : ObjectiveC.NSObject {
  @objc public var type: RemoteCameraLib.MTVideoType
  @objc public var codec: Swift.String {
    @objc get
  }
  @objc public var width: Swift.Int
  @objc public var height: Swift.Int
  @objc public var activeWidth: Swift.Int
  @objc public var activeHeight: Swift.Int
  @objc public var framerate: Swift.Int
  @objc public var samplingRate: Swift.Int
  @objc public var bitrate: Swift.Int
  @objc public var supportOrientation: Swift.String
  @objc public var isPortraitMode: Swift.Bool
  @objc public var screenOrientation: Swift.String
  @objc public var streamMuxConfig: Swift.String?
  @objc public var codecData: Foundation.Data?
  @objc public var host: Swift.String?
  @objc public var port: Swift.Int
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class LGCastMirroringPlayerInfo : ObjectiveC.NSObject {
  @objc public var width: Swift.Int
  @objc public var height: Swift.Int
  @objc public var isPortraitMode: Swift.Bool
  @objc public var ipAddress: Swift.String
  @objc public var audioPort: Swift.Int
  @objc public var videoPort: Swift.Int
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class LGCastMirroringInfo : ObjectiveC.NSObject {
  @objc public var audioInfo: RemoteCameraLib.LGCastMirroringAudioInfo?
  @objc public var videoInfo: RemoteCameraLib.LGCastMirroringVideoInfo?
  @objc public var playerInfo: RemoteCameraLib.LGCastMirroringPlayerInfo?
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class LGCastCameraParameterInfo : ObjectiveC.NSObject {
  @objc public var audio: RemoteCameraLib.LGCastCamperaPropertyStatus
  @objc public var autoWhiteBalance: RemoteCameraLib.LGCastCamperaPropertyStatus
  @objc public var brightness: Swift.Int
  @objc public var width: Swift.Int
  @objc public var height: Swift.Int
  @objc public var facing: RemoteCameraLib.LGCastCameraPosition
  @objc public var whiteBalance: Swift.Int
  @objc public var rotation: Swift.Int
  @objc override dynamic public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers public class MTRTPPipeline {
  public static func getPipeline(_ ssrc: Swift.UInt32, info: RemoteCameraLib.MTMediaInfo, isSecure: Swift.Bool) -> Swift.String?
  @objc deinit
}
extension RemoteCameraLib.MTVideoType : Swift.Equatable {}
extension RemoteCameraLib.MTVideoType : Swift.Hashable {}
extension RemoteCameraLib.MTVideoType : Swift.RawRepresentable {}
extension RemoteCameraLib.RTPStreamerMediaType : Swift.Equatable {}
extension RemoteCameraLib.RTPStreamerMediaType : Swift.Hashable {}
extension RemoteCameraLib.RTPStreamerMediaType : Swift.RawRepresentable {}
extension RemoteCameraLib.RTPStreamerRscType : Swift.Equatable {}
extension RemoteCameraLib.RTPStreamerRscType : Swift.Hashable {}
extension RemoteCameraLib.RTPStreamerRscType : Swift.RawRepresentable {}
extension RemoteCameraLib.RTPStreamerSRTPAuthType : Swift.Equatable {}
extension RemoteCameraLib.RTPStreamerSRTPAuthType : Swift.Hashable {}
extension RemoteCameraLib.RTPStreamerSRTPAuthType : Swift.RawRepresentable {}
extension RemoteCameraLib.RTPStreamerSRTPCipherType : Swift.Equatable {}
extension RemoteCameraLib.RTPStreamerSRTPCipherType : Swift.Hashable {}
extension RemoteCameraLib.RTPStreamerSRTPCipherType : Swift.RawRepresentable {}
extension RemoteCameraLib.LGCastCameraError : Swift.Equatable {}
extension RemoteCameraLib.LGCastCameraError : Swift.Hashable {}
extension RemoteCameraLib.LGCastCameraError : Swift.RawRepresentable {}
extension RemoteCameraLib.MTAudioType : Swift.Equatable {}
extension RemoteCameraLib.MTAudioType : Swift.Hashable {}
extension RemoteCameraLib.MTAudioType : Swift.RawRepresentable {}
extension RemoteCameraLib.MTMediaType : Swift.Equatable {}
extension RemoteCameraLib.MTMediaType : Swift.Hashable {}
extension RemoteCameraLib.MTMediaType : Swift.RawRepresentable {}
extension RemoteCameraLib.LGCastCameraProperty : Swift.Equatable {}
extension RemoteCameraLib.LGCastCameraProperty : Swift.Hashable {}
extension RemoteCameraLib.LGCastCameraProperty : Swift.RawRepresentable {}
extension RemoteCameraLib.LGCastCameraPosition : Swift.Equatable {}
extension RemoteCameraLib.LGCastCameraPosition : Swift.Hashable {}
extension RemoteCameraLib.LGCastCameraPosition : Swift.RawRepresentable {}
extension RemoteCameraLib.LGCastCameraPreviewVideoGravity : Swift.Equatable {}
extension RemoteCameraLib.LGCastCameraPreviewVideoGravity : Swift.Hashable {}
extension RemoteCameraLib.LGCastCameraPreviewVideoGravity : Swift.RawRepresentable {}
extension RemoteCameraLib.LGCastCamperaPropertyStatus : Swift.Equatable {}
extension RemoteCameraLib.LGCastCamperaPropertyStatus : Swift.Hashable {}
extension RemoteCameraLib.LGCastCamperaPropertyStatus : Swift.RawRepresentable {}
extension RemoteCameraLib.LGCastCameraResolution : Swift.Equatable {}
extension RemoteCameraLib.LGCastCameraResolution : Swift.Hashable {}
extension RemoteCameraLib.LGCastCameraResolution : Swift.RawRepresentable {}
